input{
	file {
		type => "geoname"
		codec => plain
        path => ["/data/input/geonames/*.txt"]
		start_position => "beginning"
		sincedb_path => "/data/sincedb/geonames"
	}
}


filter {
  if [type] == "geoname" {
    mutate {
      gsub => ["message", "\"", "?"]
    }
    csv {
      columns => ["geonameid", "name","asciiname","alternatenames","latitude","longitude","feature_class","feature_code","country_code","cc2","admin1_code","admin2_code","admin3_code","admin4_code","population","elevation","dem","timezone","mod_date"]
      separator => "	"
      add_tag => [ "geoname" ]
    }

    mutate {
      gsub => ["name", "\?", '"', 
            "asciiname", "\?", '"',  
            "alternatenames", "\?", '"']
    }

    mutate {
      split => ["alternatenames", ","]
    }

    if "geoname" in [tags] {
      mutate {
        add_field => {"[location][lat]" => "%{latitude}"}
		add_field => {"[location][lon]" => "%{longitude}"}
		convert => { "[location][lat]" => "float" }
		convert => { "[location][lon]" => "float" }
			
        remove_field => [ "message", "latitude", "longitude", "path" ]
      }
    } else {
      mutate {
        add_tag => ["geoname_parse_failure"]
      }
    }
  }
}
output {
	if [type] == "geoname" {
        if "geoname" in [tags] {
          file {
            codec => json
            flush_interval => 3
            path => "data/output/geonames/geonames.json"
          }
          elasticsearch {
            codec => json
            host => [ "52.29.7.137" ]
            protocol => "transport"
            index => "geonames"
            document_id => "%{[geonameid]}"
          }
        } else {
          file {
            flush_interval => 0
            path => "data/output/geonames/geonames_failed.log"
          }
          stdout {
            codec => rubydebug
          }
        }
	}
}
